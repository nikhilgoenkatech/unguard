name: Run Skaffold Pipeline, Deploy to EKS and run unguard helm test
on:
  push:
    branches:
      - code-vulnerabilities
      - staging
      
    paths:
      - src/**
      - skaffold.yaml
      - chart/**
      - code-vulnerabilities/**
      - staging/**

  pull_request:
    paths:
      - src/**
      - skaffold.yaml
      - chart/**

  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment (e.g., dev, staging, prod)'
        required: true
        default: 'dev'
      run_tests:
        description: 'Run Helm tests (true/false)'
        required: false
        default: 'true'

jobs:
  push:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
        OTLP_PROTOCOL: HTTPS
        WORKFLOW_RUN_ID: ${{ github.event.workflow_run.id }}
        WORKFLOW_RUN_NAME: ${{ github.event.workflow_run.name }}
        OTEL_EXPORTER_OTLP_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_ENDPOINT }}
        OTEL_EXPORTER_OTLP_HEADERS: Authorization=Api-Token ${{ secrets.DYNATRACE_OTEL_API_TOKEN }}
        OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_METRICS_ENDPOINT }}
        OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_TRACES_ENDPOINT }}
        OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_LOGS_ENDPOINT }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        EKS_REGION: ${{ secrets.EKS_REGION }}
        GITHUB_DEBUG: true
        ACTIONS_RUNNER_DEBUG: true
        ACTIONS_STEP_DEBUG: true
    steps:
      - uses: plengauer/opentelemetry-github/actions/instrument/job@v5.21.0
        env:
          OTLP_PROTOCOL: HTTPS
          WORKFLOW_RUN_ID: ${{ github.event.workflow_run.id }}
          WORKFLOW_RUN_NAME: ${{ github.event.workflow_run.name }}
          OTEL_EXPORTER_OTLP_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_ENDPOINT }}
          OTEL_EXPORTER_OTLP_HEADERS: Authorization=Api-Token ${{ secrets.DYNATRACE_OTEL_API_TOKEN }}
          OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_METRICS_ENDPOINT }}
          OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_TRACES_ENDPOINT }}
          OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_LOGS_ENDPOINT }}        
        with:
          cache: false
          secrets_to_redact: '${{ toJSON(secrets) }}'          
        
      - name: Checkout sources
        uses: actions/checkout@v3
        env: 
          GITHUB_STEP: Setup, build, deploy and test unguard
          OTLP_PROTOCOL: HTTPS
          WORKFLOW_RUN_ID: ${{ github.event.workflow_run.id }}
          WORKFLOW_RUN_NAME: ${{ github.event.workflow_run.name }}
          OTEL_EXPORTER_OTLP_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_ENDPOINT }}
          OTEL_EXPORTER_OTLP_HEADERS: Authorization=Api-Token ${{ secrets.DYNATRACE_OTEL_API_TOKEN }}
          OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_METRICS_ENDPOINT }}
          OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_TRACES_ENDPOINT }}
          OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_LOGS_ENDPOINT }}        
          
        with:
          cache: false
          submodules: false
          lfs: false
          secrets_to_redact: '${{ toJSON(secrets) }}'
          fetch-depth: 0  # Ensures full history and tags are fetched
          
        
    #  - name: Configure AWS credentials
    #    env:
    #      GITHUB_STEP: Setting EKS credentials
    #      OTLP_PROTOCOL: HTTPS
    #      WORKFLOW_RUN_ID: ${{ github.event.workflow_run.id }}
    #      WORKFLOW_RUN_NAME: ${{ github.event.workflow_run.name }}
    #      OTEL_EXPORTER_OTLP_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_ENDPOINT }}
    #      OTEL_EXPORTER_OTLP_HEADERS: Authorization=Api-Token ${{ secrets.DYNATRACE_OTEL_API_TOKEN }}
    #      OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_METRICS_ENDPOINT }}
    #      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_TRACES_ENDPOINT }}
    #      OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_LOGS_ENDPOINT }}        
    #      secrets_to_redact: '${{ toJSON(secrets) }}'
    #    run: |
    #         if [ -z "$AWS_ACCESS_KEY_ID" ]; then echo "Missing AWS_ACCESS_KEY_ID"; exit 1; fi
    #         if [ -z "$AWS_SECRET_ACCESS_KEY" ]; then echo "Missing AWS_SECRET_ACCESS_KEY"; exit 1; fi
    #         if [ -z "$AWS_SESSION_TOKEN" ]; then echo "Missing AWS_SESSION_TOKEN"; exit 1; fi
    #         aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    #         aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    #         aws configure set aws_session_token $AWS_SESSION_TOKEN
    #         aws configure set region $EKS_REGION

     # - name: Update kubeconfig for EKS
     #   run: |
     #       aws eks update-kubeconfig --name $CLUSTER_NAME --region $EKS_REGION
     #   env:
     #     GITHUB_STEP: Setting up EKS connection
     #     EKS_REGION: ${{ secrets.EKS_REGION }}
     #     CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
     #     OTLP_PROTOCOL: HTTPS
     #     WORKFLOW_RUN_ID: ${{ github.event.workflow_run.id }}
     #     WORKFLOW_RUN_NAME: ${{ github.event.workflow_run.name }}
     #     OTEL_EXPORTER_OTLP_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_ENDPOINT }}
     #     OTEL_EXPORTER_OTLP_HEADERS: Authorization=Api-Token ${{ secrets.DYNATRACE_OTEL_API_TOKEN }}
     #     OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_METRICS_ENDPOINT }}
     #     OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_TRACES_ENDPOINT }}
     #     OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_LOGS_ENDPOINT }}               
     #     secrets_to_redact: '${{ toJSON(secrets) }}'

      # - name: Test kubectl access
      #  env:
      #    GITHUB_STEP: Validate EKS connection
      #    OTLP_PROTOCOL: HTTPS
      #    WORKFLOW_RUN_ID: ${{ github.event.workflow_run.id }}
      #    WORKFLOW_RUN_NAME: ${{ github.event.workflow_run.name }}
      #    OTEL_EXPORTER_OTLP_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_ENDPOINT }}
      #    OTEL_EXPORTER_OTLP_HEADERS: Authorization=Api-Token ${{ secrets.DYNATRACE_OTEL_API_TOKEN }}
      #    OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_METRICS_ENDPOINT }}
      #    OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_TRACES_ENDPOINT }}
      #    OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_LOGS_ENDPOINT }}      
      #  run: |
      #      kubectl get pods -A
  

      - name: Kubectl tool installer
        env:
          GITHUB_STEP: Setup kubectl on runner
          OTLP_PROTOCOL: HTTPS
          WORKFLOW_RUN_ID: ${{ github.event.workflow_run.id }}
          WORKFLOW_RUN_NAME: ${{ github.event.workflow_run.name }}
          OTEL_EXPORTER_OTLP_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_ENDPOINT }}
          OTEL_EXPORTER_OTLP_HEADERS: Authorization=Api-Token ${{ secrets.DYNATRACE_OTEL_API_TOKEN }}
          OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_METRICS_ENDPOINT }}
          OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_TRACES_ENDPOINT }}
          OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_LOGS_ENDPOINT }}            
        uses: Azure/setup-kubectl@v3

      - name: Calculate next release version
        id: version
        env:
            GITHUB_STEP: Setting up release information
            OTLP_PROTOCOL: HTTPS
            RELEASE_ID: ${{ env.RELEASE_VERSION }}
            WORKFLOW_RUN_ID: ${{ github.event.workflow_run.id }}
            WORKFLOW_RUN_NAME: ${{ github.event.workflow_run.name }}
            OTEL_EXPORTER_OTLP_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_ENDPOINT }}
            OTEL_EXPORTER_OTLP_HEADERS: Authorization=Api-Token ${{ secrets.DYNATRACE_OTEL_API_TOKEN }}
            OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_METRICS_ENDPOINT }}
            OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_TRACES_ENDPOINT }}
            OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_LOGS_ENDPOINT }}
        run: |
          latest=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null || echo "v0.0.0")
          IFS='.' read -ra parts <<< "${latest#v}"
          major=${parts[0]}
          minor=$((parts[1] + 1))
          echo "RELEASE_VERSION=v${major}.${minor}.0" >> $GITHUB_ENV
          echo "IMAGE_TAG_unguard_proxy_service=v${major}.${minor}.0" >> $GITHUB_ENV
          
      - name: Docker login
        env:
          GITHUB_STEP: Login to docker
          OTLP_PROTOCOL: HTTPS
          WORKFLOW_RUN_ID: ${{ github.event.workflow_run.id }}
          WORKFLOW_RUN_NAME: ${{ github.event.workflow_run.name }}
          OTEL_EXPORTER_OTLP_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_ENDPOINT }}
          OTEL_EXPORTER_OTLP_HEADERS: Authorization=Api-Token ${{ secrets.DYNATRACE_OTEL_API_TOKEN }}
          OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_METRICS_ENDPOINT }}
          OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_TRACES_ENDPOINT }}
          OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_LOGS_ENDPOINT }}    
          RELEASE_ID: ${{ env.RELEASE_VERSION }}
          DOCKER_REGISTRY_PASSWORD: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
          secrets_to_redact: '${{ toJSON(secrets) }}'
        with:
          username: "nikhilgoenka"
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
        uses: docker/login-action@v3
          
      - name: Install Skaffold
      
        env:
          GITHUB_STEP: Install skaffold
          OTLP_PROTOCOL: HTTPS
          RELEASE_ID: ${{ env.RELEASE_VERSION }}
          WORKFLOW_RUN_ID: ${{ github.event.workflow_run.id }}
          WORKFLOW_RUN_NAME: ${{ github.event.workflow_run.name }}
          OTEL_EXPORTER_OTLP_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_ENDPOINT }}
          OTEL_EXPORTER_OTLP_HEADERS: Authorization=Api-Token ${{ secrets.DYNATRACE_OTEL_API_TOKEN }}
          OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_METRICS_ENDPOINT }}
          OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_TRACES_ENDPOINT }}
          OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_LOGS_ENDPOINT }}
          DOCKER_REGISTRY_PASSWORD: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
      
        run: |
          curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/v2.7.0/skaffold-linux-amd64
          chmod +x skaffold
          sudo mv skaffold /usr/local/bin/

      - name: Push build start SDLC event to Dynatrace
        env:
          GITHUB_STEP: Buid start SLDC event
          OTLP_PROTOCOL: HTTPS
          WORKFLOW_RUN_ID: ${{ github.event.workflow_run.id }}
          WORKFLOW_RUN_NAME: ${{ github.event.workflow_run.name }}
          OTEL_EXPORTER_OTLP_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_ENDPOINT }}
          OTEL_EXPORTER_OTLP_HEADERS: Authorization=Api-Token ${{ secrets.DYNATRACE_OTEL_API_TOKEN }}
          OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_METRICS_ENDPOINT }}
          OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_TRACES_ENDPOINT }}
          OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_LOGS_ENDPOINT }}                  
          RELEASE_ID: ${{ env.RELEASE_VERSION }}
          DYNATRACE_API_TOKEN: ${{ secrets.DYNATRACE_OTEL_API_TOKEN }}
          DYNATRACE_SDLCEVENT_ENDPOINT: ${{ secrets.DYNATRACE_SDLCEVENT_ENDPOINT }}
        run: |
          curl -X POST $DYNATRACE_SDLCEVENT_ENDPOINT \
            -H "Content-Type: application/json" \
            -H "Authorization: Api-Token $DYNATRACE_API_TOKEN" \
            -d '{
              "event.kind": "SDLC_EVENT",
              "event.type": "Build",
              "event.status": "started",
              "event.category": "task",
              "event.provider": "github.com",
              "source": "GitHub Actions",
              "artifact.name": "unguard-proxy-service",
              "artifact.version": "'${RELEASE_ID}'",
              "cicd.pipeline.name": "${{ github.workflow }}",
              "cicd.pipeline.run.id": "${{ github.run_id }}",
              
              "cicd.pipeline.run.url.full": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "ciBackLink": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }'
            
      - name: Build and Push Skaffold Image
        env:
          GITHUB_STEP: Build unguard ${{ env.RELEASE_VERSION }}
          OTLP_PROTOCOL: HTTPS
          RELEASE_ID: ${{ env.RELEASE_VERSION }}
          WORKFLOW_RUN_ID: ${{ github.event.workflow_run.id }}
          WORKFLOW_RUN_NAME: ${{ github.event.workflow_run.name }}
          OTEL_EXPORTER_OTLP_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_ENDPOINT }}
          OTEL_EXPORTER_OTLP_HEADERS: Authorization=Api-Token ${{ secrets.DYNATRACE_OTEL_API_TOKEN }}
          OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_METRICS_ENDPOINT }}
          OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_TRACES_ENDPOINT }}
          OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_LOGS_ENDPOINT }}
          DOCKER_REGISTRY_PASSWORD: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
        run: |
          skaffold build --default-repo=docker.io/nikhilgoenka --tag=${RELEASE_ID} --push

      - name: Push build end SDLC event to Dynatrace
        env:
          GITHUB_STEP: Buid end SLDC event
          OTLP_PROTOCOL: HTTPS
          WORKFLOW_RUN_ID: ${{ github.event.workflow_run.id }}
          WORKFLOW_RUN_NAME: ${{ github.event.workflow_run.name }}
          OTEL_EXPORTER_OTLP_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_ENDPOINT }}
          OTEL_EXPORTER_OTLP_HEADERS: Authorization=Api-Token ${{ secrets.DYNATRACE_OTEL_API_TOKEN }}
          OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_METRICS_ENDPOINT }}
          OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_TRACES_ENDPOINT }}
          OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_LOGS_ENDPOINT }}                  
          RELEASE_ID: ${{ env.RELEASE_VERSION }}
          DYNATRACE_API_TOKEN: ${{ secrets.DYNATRACE_OTEL_API_TOKEN }}
          DYNATRACE_SDLCEVENT_ENDPOINT: ${{ secrets.DYNATRACE_SDLCEVENT_ENDPOINT }}
        run: |
          curl -X POST $DYNATRACE_SDLCEVENT_ENDPOINT \
            -H "Content-Type: application/json" \
            -H "Authorization: Api-Token $DYNATRACE_API_TOKEN" \
            -d '{
              "event.kind": "SDLC_EVENT",
              "event.type": "Build",
              "event.status": "ended",
              "event.category": "task",
              "event.provider": "github.com",
              "source": "GitHub Actions",
              "artifact.name": "unguard-proxy-service",
              "artifact.version": "'${RELEASE_ID}'",
              "cicd.pipeline.name": "${{ github.workflow }}",
              "cicd.pipeline.run.id": "${{ github.run_id }}",
              "vcs.ref.base.revision": "${{ github.sha }}",
              "vcs.ref.head.name": "staging",
              "cicd.pipeline.run.url.full": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "ciBackLink": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }'
          

      - name: Deploy to EKS
        env:
          GITHUB_STEP: Deploy ${{ env.RELEASE_VERSION }}
          OTLP_PROTOCOL: HTTPS
          RELEASE_ID: ${{ env.RELEASE_VERSION }}
          IMAGE_TAG_unguard_proxy_service: ${{ env.IMAGE_TAG_unguard_proxy_service }}          
          WORKFLOW_RUN_ID: ${{ github.event.workflow_run.id }}
          WORKFLOW_RUN_NAME: ${{ github.event.workflow_run.name }}
          OTEL_EXPORTER_OTLP_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_ENDPOINT }}
          OTEL_EXPORTER_OTLP_HEADERS: Authorization=Api-Token ${{ secrets.DYNATRACE_OTEL_API_TOKEN }}
          OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_METRICS_ENDPOINT }}
          OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_TRACES_ENDPOINT }}
          OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_LOGS_ENDPOINT }}
        run: |
          kubectl set image deployment/unguard-proxy-service \
            proxy-service=docker.io/nikhilgoenka/unguard-proxy-service:${RELEASE_ID} \
            --namespace=unguard
            
            kubectl patch deployment unguard-proxy-service \
            -n unguard \
            --patch "$(cat <<EOF
          {
            "spec": {
              "template": {
                "spec": {
                  "containers": [
                    {
                      "name": "proxy-service",
                      "env": [
                        {
                          "name": "DT_RELEASE_VERSION",
                          "value": "v1"
                        },
                        {
                          "name": "DT_RELEASE_STAGE",
                          "value": "Staging"
                        },
                        {
                          "name": "DT_RELEASE_BUILD_VERSION",
                          "value": "${RELEASE_ID}"
                        },
                        {
                          "name": "DT_RELEASE_PRODUCT",
                          "value": "unguard"
                        },
                        {
                          "name": "SERVER_PORT",
                          "value": "8081"
                        },
                        {
                          "name": "JAEGER_AGENT_HOST",
                          "value": "agent"
                        },
                        {
                          "name": "JAEGER_SAMPLER_TYPE",
                          "value": "const"
                        },
                        {
                          "name": "JAEGER_SAMPLER_PARAM",
                          "value": "0"
                        },
                        {
                          "name": "OPENTRACING_JAEGER_ENABLED",
                          "value": "false"
                        },
                        {
                          "name": "JAEGER_SERVICE_NAME",
                          "value": "unguard-proxy-service"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          }
          EOF
          )" 
          
      - name: Logout from Docker
        if: always()
        run: docker logout

permissions:
  actions: read
